name: Update Changelog

on:
  push:
    branches:
      - main
      - master

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get commit information
        id: commit-info
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_DATE=$(date +%Y-%m-%d)
          
          echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "date=$COMMIT_DATE" >> $GITHUB_OUTPUT
          
          # Get changed files in this commit
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | tr '\n' ',' | sed 's/,$//')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
      
      - name: Get commit context
        id: get-context
        run: |
          # Get the full commit details including diff
          COMMIT_BODY=$(git log -1 --pretty=format:"%b" | head -20)
          
          # Get a summary of changes
          DIFF_STAT=$(git diff --stat HEAD~1 HEAD 2>/dev/null | head -20 || echo "")
          DIFF_SUMMARY=$(git diff HEAD~1 HEAD 2>/dev/null | head -50 || echo "")
          
          # Save context to files for the AI step
          echo "$DIFF_STAT" > /tmp/diff_stat.txt
          echo "$DIFF_SUMMARY" > /tmp/diff_summary.txt
          echo "$COMMIT_BODY" > /tmp/commit_body.txt
          
          # Make outputs available
          echo "diff_stat<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/diff_stat.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "commit_body<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/commit_body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Call AI to generate changelog
        id: ai-generate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          COMMIT_MESSAGE: ${{ steps.commit-info.outputs.message }}
          COMMIT_AUTHOR: ${{ steps.commit-info.outputs.author }}
          CHANGED_FILES: ${{ steps.commit-info.outputs.files }}
          DIFF_STAT: ${{ steps.get-context.outputs.diff_stat }}
          COMMIT_BODY: ${{ steps.get-context.outputs.commit_body }}
        run: |
          # Try to generate with AI
          if [ -n "$OPENAI_API_KEY" ]; then
            if python3 .github/workflows/generate_changelog_ai.py > /tmp/ai_changelog.txt 2>/tmp/ai_error.txt; then
              CHANGELOG_ENTRY=$(cat /tmp/ai_changelog.txt)
              echo "ai_success=true" >> $GITHUB_OUTPUT
              echo "✓ AI-generated changelog entry"
            else
              echo "✗ AI generation failed: $(cat /tmp/ai_error.txt)"
              echo "ai_success=false" >> $GITHUB_OUTPUT
              CHANGELOG_ENTRY=""
            fi
          else
            echo "OpenAI API key not configured"
            echo "ai_success=false" >> $GITHUB_OUTPUT
            CHANGELOG_ENTRY=""
          fi
          
          # Save the entry
          echo "entry<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Process and finalize changelog entry
        id: generate-changelog
        uses: actions/github-script@v7
        with:
          script: |
            const commitMessage = '${{ steps.commit-info.outputs.message }}';
            const commitAuthor = '${{ steps.commit-info.outputs.author }}';
            const changedFiles = '${{ steps.commit-info.outputs.files }}'.split(',').filter(f => f);
            const aiEntry = `${{ steps.ai-generate.outputs.entry }}`;
            const aiSuccess = '${{ steps.ai-generate.outputs.ai_success }}' === 'true';
            
            // Skip if this is a changelog update commit to avoid infinite loop
            if (commitMessage.includes('Update changelog') || commitMessage.includes('update-changelog')) {
              console.log('Skipping changelog update commit');
              core.setOutput('skip', 'true');
              return;
            }
            
            let changelogEntry = '';
            
            // Use AI-generated entry if available
            if (aiSuccess && aiEntry && aiEntry.trim() !== '') {
              console.log('Using AI-generated changelog entry');
              changelogEntry = aiEntry;
            } else {
              // Fallback: Generate structured changelog entry
              console.log('Using fallback template-based generation');
              
              const relevantFiles = changedFiles.filter(f => 
                !f.includes('.github/workflows/update-changelog.yml') &&
                !f.includes('node_modules') &&
                !f.includes('.git')
              );
              
              changelogEntry = `- **${commitMessage}** (${commitAuthor})`;
              
              if (relevantFiles.length > 0 && relevantFiles.length < 10) {
                changelogEntry += `\n  - Modified: ${relevantFiles.join(', ')}`;
              } else if (relevantFiles.length >= 10) {
                changelogEntry += `\n  - Modified ${relevantFiles.length} files`;
              }
            }
            
            core.setOutput('entry', changelogEntry);
            core.setOutput('skip', 'false');
      
      - name: Update README with changelog
        if: steps.generate-changelog.outputs.skip != 'true'
        run: |
          CHANGELOG_ENTRY="${{ steps.generate-changelog.outputs.entry }}"
          COMMIT_DATE="${{ steps.commit-info.outputs.date }}"
          
          # Create a temporary file
          temp_file=$(mktemp)
          
          # Read the README and insert the new changelog entry
          awk -v date="$COMMIT_DATE" -v entry="$CHANGELOG_ENTRY" '
          /^## Changelog/ {
            print
            print ""
            print "### " date
            print entry
            in_changelog=1
            next
          }
          in_changelog && /^### / {
            in_changelog=0
          }
          !in_changelog || /^### / {
            print
          }
          ' README.md > "$temp_file"
          
          # Replace README with updated content
          mv "$temp_file" README.md
      
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet README.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push changes
        if: steps.check-changes.outputs.changed == 'true' && steps.generate-changelog.outputs.skip != 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          git commit -m "Update changelog with latest changes [skip ci]"
          git push
